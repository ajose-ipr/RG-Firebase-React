const express = require('express');
const Entry = require('../models/Entry');
const AuditLog = require('../models/AuditLog');
const { authenticateToken, requireAdmin } = require('../middleware/auth');

const router = express.Router();

// Export entries as CSV
router.get('/csv', authenticateToken, async (req, res) => {
  try {
    const { startDate, endDate, createdBy } = req.query;
    
    // Build query filters
    let query = {};
    if (startDate || endDate) {
      query.CREATED_AT = {};
      if (startDate) query.CREATED_AT.$gte = new Date(startDate);
      if (endDate) query.CREATED_AT.$lte = new Date(endDate);
    }
    if (createdBy) {
      query.CREATED_BY = createdBy;
    }
    
    const entries = await Entry.find(query).sort({ SL_NO: -1 });
    
    // Create CSV content
    const csvHeaders = [
      'SL_NO',
      'USER_NAME',
      'PARTICULARS',
      'CLIENT_CODE',
      'CAPACITY_MW',
      'STATE_NAME',
      'SITE_NAME',
      'CUMULATIVE_NUMBER',
      'INCREMENTAL_NUMBER',
      'REFERENCE_CODE',
      'CREATED_AT',
      'CREATED_BY',
      'LAST_MODIFIED',
      'MODIFIED_BY'
    ];
    
    const csvRows = entries.map(entry => [
      entry.SL_NO,
      entry.USER_NAME,
      entry.PARTICULARS,
      entry.CLIENT_CODE,
      entry.CAPACITY_MW,
      entry.STATE_NAME,
      entry.SITE_NAME,
      entry.CUMULATIVE_NUMBER,
      entry.INCREMENTAL_NUMBER,
      entry.REFERENCE_CODE,
      entry.CREATED_AT.toISOString(),
      entry.CREATED_BY,
      entry.LAST_MODIFIED.toISOString(),
      entry.MODIFIED_BY || ''
    ]);
    
    const csvContent = [
      csvHeaders.join(','),
      ...csvRows.map(row => row.map(field => 
        typeof field === 'string' && field.includes(',') 
          ? `"${field.replace(/"/g, '""')}"` 
          : field
      ).join(','))
    ].join('\n');
    
    // Set headers for file download
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    const filename = `entries_export_${timestamp}.csv`;
    
    res.setHeader('Content-Type', 'text/csv');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Content-Length', Buffer.byteLength(csvContent));
    
    // Log export action
    await AuditLog.logUserAction('EXPORT_CSV', req.user.username, req);
    
    console.log(`✅ CSV export generated by ${req.user.username} - ${entries.length} entries`);
    res.send(csvContent);
  } catch (error) {
    console.error('Error generating CSV export:', error);
    res.status(500).json({ error: error.message });
  }
});

// Export entries as JSON
router.get('/json', authenticateToken, async (req, res) => {
  try {
    const { startDate, endDate, createdBy, includeAudit = false } = req.query;
    
    // Build query filters
    let query = {};
    if (startDate || endDate) {
      query.CREATED_AT = {};
      if (startDate) query.CREATED_AT.$gte = new Date(startDate);
      if (endDate) query.CREATED_AT.$lte = new Date(endDate);
    }
    if (createdBy) {
      query.CREATED_BY = createdBy;
    }
    
    const entries = await Entry.find(query).sort({ SL_NO: -1 });
    
    let exportData = {
      exportDate: new Date().toISOString(),
      exportedBy: req.user.username,
      totalEntries: entries.length,
      filters: { startDate, endDate, createdBy },
      entries: entries
    };
    
    // Include audit trail if requested (admin only)
    if (includeAudit && req.user.role === 'admin') {
      const entryIds = entries.map(e => e._id.toString());
      const auditLogs = await AuditLog.find({ entryId: { $in: entryIds } }).sort({ timestamp: -1 });
      exportData.auditTrail = auditLogs;
    }
    
    // Set headers for file download
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    const filename = `entries_export_${timestamp}.json`;
    
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    
    // Log export action
    await AuditLog.logUserAction('EXPORT_JSON', req.user.username, req);
    
    console.log(`✅ JSON export generated by ${req.user.username} - ${entries.length} entries`);
    res.json(exportData);
  } catch (error) {
    console.error('Error generating JSON export:', error);
    res.status(500).json({ error: error.message });
  }
});

// Export audit logs (admin only)
router.get('/audit', authenticateToken, requireAdmin, async (req, res) => {
  try {
    const { startDate, endDate, userId, action } = req.query;
    
    // Build query filters
    let query = {};
    if (startDate || endDate) {
      query.timestamp = {};
      if (startDate) query.timestamp.$gte = new Date(startDate);
      if (endDate) query.timestamp.$lte = new Date(endDate);
    }
    if (userId) {
      query.userId = userId;
    }
    if (action) {
      query.action = action.toUpperCase();
    }
    
    const auditLogs = await AuditLog.find(query).sort({ timestamp: -1 });
    
    const exportData = {
      exportDate: new Date().toISOString(),
      exportedBy: req.user.username,
      totalLogs: auditLogs.length,
      filters: { startDate, endDate, userId, action },
      auditLogs: auditLogs
    };
    
    // Set headers for file download
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    const filename = `audit_logs_${timestamp}.json`;
    
    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    
    console.log(`✅ Audit logs export generated by ${req.user.username} - ${auditLogs.length} logs`);
    res.json(exportData);
  } catch (error) {
    console.error('Error generating audit export:', error);
    res.status(500).json({ error: error.message });
  }
});

// Get export statistics
router.get('/stats', authenticateToken, async (req, res) => {
  try {
    const stats = {
      totalEntries: await Entry.countDocuments(),
      entriesThisMonth: await Entry.countDocuments({
        CREATED_AT: {
          $gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1)
        }
      }),
      entriesByUser: await Entry.aggregate([
        { $group: { _id: '$CREATED_BY', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
      ]),
      entriesByParticulars: await Entry.aggregate([
        { $group: { _id: '$PARTICULARS', count: { $sum: 1 } } },
        { $sort: { count: -1 } }
      ])
    };
    
    // Add admin-only stats
    if (req.user.role === 'admin') {
      stats.auditLogCount = await AuditLog.countDocuments();
      stats.recentActivity = await AuditLog.find().sort({ timestamp: -1 }).limit(10);
    }
    
    res.json(stats);
  } catch (error) {
    console.error('Error generating export stats:', error);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;